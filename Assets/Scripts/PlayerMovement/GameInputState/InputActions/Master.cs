//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Scripts/PlayerMovement/GameInputState/InputActions/Master.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/PlayerMovement/GameInputState/InputActions/Master.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Master: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Master()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Master"",
    ""maps"": [
        {
            ""name"": ""PlayerInputXbox"",
            ""id"": ""bd8d9707-fd15-41e0-ab3b-30a3252e035f"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""bc5849d0-65d5-46cd-ae50-e8e723f8d4e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e24f98d3-5364-40eb-aa0b-2b57cd50e583"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwordAttack"",
                    ""type"": ""Button"",
                    ""id"": ""e388f6aa-22b1-4214-9b3e-9aa37a7ffb79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""ba1d9bc3-de98-4ac0-86b6-17d59e6cd2a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09ce7278-e3d7-494d-a17a-6292ac2c12e4"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Axis"",
                    ""id"": ""3499820c-7e69-4a10-b338-73350bc45fbb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2,StickDeadzone(min=0.2)"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""550686b7-c3dc-48b3-adc2-9e9b1e38d1fd"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""2eb023fd-cc52-4e1d-a6e4-bd3874b1076c"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""1ac7fc2e-ac54-4b97-8fe9-6364e1d9ded6"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""76008c0e-73fb-4b85-a29c-4637b30f90dd"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""033dc06a-a943-4c5a-91b3-9c15a2ed4861"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xbox"",
                    ""action"": ""SwordAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8b85916-8c45-446a-ae52-9545b3fcec2e"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": ""SlowTap(duration=2,pressPoint=1)"",
                    ""processors"": """",
                    ""groups"": ""Xbox"",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInputKeyboard"",
            ""id"": ""a14928ab-4651-474f-be85-768e13881977"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""4f06563e-1ec4-4019-960b-8619422f6fcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f14e5fa1-fa91-4f85-82b6-146e99d7c870"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwordAttack"",
                    ""type"": ""Button"",
                    ""id"": ""1db44ed3-2b36-487c-983a-79b37fa0e297"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""c44da700-73ec-46c9-a6b2-4309b4b32aba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1201c60-0abd-475a-8dcf-29c3f54c9379"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Axis"",
                    ""id"": ""ceb36622-dd0e-4721-ab56-3966e67ff6e9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2,StickDeadzone(min=0.2)"",
                    ""groups"": ""Xbox"",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""015b67aa-829f-414b-8c4c-1c5f9b6f8980"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""9ae67c1e-86e9-4c13-ac0f-083cf70dc017"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""37eae724-0b7f-472f-8ff8-1f40433aeed3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""815da659-a213-47fb-9aa8-b6037d111488"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""595a916b-5808-409d-bcc9-c654d2075b53"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwordAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ac80143-9ac4-4695-93ca-f6c2cdc5e6b9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""SlowTap(duration=2,pressPoint=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SaveGame"",
            ""id"": ""56d83399-fafd-4f60-a9d2-0b6beb881319"",
            ""actions"": [
                {
                    ""name"": ""Create"",
                    ""type"": ""Button"",
                    ""id"": ""261f5931-a50d-4bbf-927b-854619b8c370"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""7303a9ad-fe30-4ff0-9c13-007923b59207"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""b8a035b8-372d-4236-972f-5de58253552e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NewGame"",
                    ""type"": ""Button"",
                    ""id"": ""f8f89038-cdb1-4de1-96ef-11a87865d131"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""80399756-7400-4637-b376-b7ba3e5dd4c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""d6369135-6567-4ea5-84eb-60ea2bf4557b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ac0f5df-feaa-4688-bc16-4e11a36e3b74"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Create"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""737c740f-416f-4f96-a9b2-765ac5fc1afe"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95b13924-fdca-403a-bec9-857bebd9b27c"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aaebc2db-fd00-4176-b3d9-44aea41bf7cd"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NewGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ff799ed-c6b3-489d-86c8-a02aab92368d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""102d59d0-aa47-47b1-8691-7b8155f99e6c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox"",
            ""bindingGroup"": ""Xbox"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerInputXbox
        m_PlayerInputXbox = asset.FindActionMap("PlayerInputXbox", throwIfNotFound: true);
        m_PlayerInputXbox_Dash = m_PlayerInputXbox.FindAction("Dash", throwIfNotFound: true);
        m_PlayerInputXbox_Movement = m_PlayerInputXbox.FindAction("Movement", throwIfNotFound: true);
        m_PlayerInputXbox_SwordAttack = m_PlayerInputXbox.FindAction("SwordAttack", throwIfNotFound: true);
        m_PlayerInputXbox_SpecialAttack = m_PlayerInputXbox.FindAction("SpecialAttack", throwIfNotFound: true);
        // PlayerInputKeyboard
        m_PlayerInputKeyboard = asset.FindActionMap("PlayerInputKeyboard", throwIfNotFound: true);
        m_PlayerInputKeyboard_Dash = m_PlayerInputKeyboard.FindAction("Dash", throwIfNotFound: true);
        m_PlayerInputKeyboard_Movement = m_PlayerInputKeyboard.FindAction("Movement", throwIfNotFound: true);
        m_PlayerInputKeyboard_SwordAttack = m_PlayerInputKeyboard.FindAction("SwordAttack", throwIfNotFound: true);
        m_PlayerInputKeyboard_SpecialAttack = m_PlayerInputKeyboard.FindAction("SpecialAttack", throwIfNotFound: true);
        // SaveGame
        m_SaveGame = asset.FindActionMap("SaveGame", throwIfNotFound: true);
        m_SaveGame_Create = m_SaveGame.FindAction("Create", throwIfNotFound: true);
        m_SaveGame_Save = m_SaveGame.FindAction("Save", throwIfNotFound: true);
        m_SaveGame_Load = m_SaveGame.FindAction("Load", throwIfNotFound: true);
        m_SaveGame_NewGame = m_SaveGame.FindAction("NewGame", throwIfNotFound: true);
        m_SaveGame_Mouse = m_SaveGame.FindAction("Mouse", throwIfNotFound: true);
        m_SaveGame_MousePosition = m_SaveGame.FindAction("MousePosition", throwIfNotFound: true);
    }

    ~@Master()
    {
        UnityEngine.Debug.Assert(!m_PlayerInputXbox.enabled, "This will cause a leak and performance issues, Master.PlayerInputXbox.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerInputKeyboard.enabled, "This will cause a leak and performance issues, Master.PlayerInputKeyboard.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SaveGame.enabled, "This will cause a leak and performance issues, Master.SaveGame.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputXbox
    private readonly InputActionMap m_PlayerInputXbox;
    private List<IPlayerInputXboxActions> m_PlayerInputXboxActionsCallbackInterfaces = new List<IPlayerInputXboxActions>();
    private readonly InputAction m_PlayerInputXbox_Dash;
    private readonly InputAction m_PlayerInputXbox_Movement;
    private readonly InputAction m_PlayerInputXbox_SwordAttack;
    private readonly InputAction m_PlayerInputXbox_SpecialAttack;
    /// <summary>
    /// Provides access to input actions defined in input action map "PlayerInputXbox".
    /// </summary>
    public struct PlayerInputXboxActions
    {
        private @Master m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerInputXboxActions(@Master wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputXbox/Dash".
        /// </summary>
        public InputAction @Dash => m_Wrapper.m_PlayerInputXbox_Dash;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputXbox/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_PlayerInputXbox_Movement;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputXbox/SwordAttack".
        /// </summary>
        public InputAction @SwordAttack => m_Wrapper.m_PlayerInputXbox_SwordAttack;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputXbox/SpecialAttack".
        /// </summary>
        public InputAction @SpecialAttack => m_Wrapper.m_PlayerInputXbox_SpecialAttack;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputXbox; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerInputXboxActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerInputXboxActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerInputXboxActions" />
        public void AddCallbacks(IPlayerInputXboxActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputXboxActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputXboxActionsCallbackInterfaces.Add(instance);
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @SwordAttack.started += instance.OnSwordAttack;
            @SwordAttack.performed += instance.OnSwordAttack;
            @SwordAttack.canceled += instance.OnSwordAttack;
            @SpecialAttack.started += instance.OnSpecialAttack;
            @SpecialAttack.performed += instance.OnSpecialAttack;
            @SpecialAttack.canceled += instance.OnSpecialAttack;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerInputXboxActions" />
        private void UnregisterCallbacks(IPlayerInputXboxActions instance)
        {
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @SwordAttack.started -= instance.OnSwordAttack;
            @SwordAttack.performed -= instance.OnSwordAttack;
            @SwordAttack.canceled -= instance.OnSwordAttack;
            @SpecialAttack.started -= instance.OnSpecialAttack;
            @SpecialAttack.performed -= instance.OnSpecialAttack;
            @SpecialAttack.canceled -= instance.OnSpecialAttack;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerInputXboxActions.UnregisterCallbacks(IPlayerInputXboxActions)" />.
        /// </summary>
        /// <seealso cref="PlayerInputXboxActions.UnregisterCallbacks(IPlayerInputXboxActions)" />
        public void RemoveCallbacks(IPlayerInputXboxActions instance)
        {
            if (m_Wrapper.m_PlayerInputXboxActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerInputXboxActions.AddCallbacks(IPlayerInputXboxActions)" />
        /// <seealso cref="PlayerInputXboxActions.RemoveCallbacks(IPlayerInputXboxActions)" />
        /// <seealso cref="PlayerInputXboxActions.UnregisterCallbacks(IPlayerInputXboxActions)" />
        public void SetCallbacks(IPlayerInputXboxActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputXboxActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputXboxActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerInputXboxActions" /> instance referencing this action map.
    /// </summary>
    public PlayerInputXboxActions @PlayerInputXbox => new PlayerInputXboxActions(this);

    // PlayerInputKeyboard
    private readonly InputActionMap m_PlayerInputKeyboard;
    private List<IPlayerInputKeyboardActions> m_PlayerInputKeyboardActionsCallbackInterfaces = new List<IPlayerInputKeyboardActions>();
    private readonly InputAction m_PlayerInputKeyboard_Dash;
    private readonly InputAction m_PlayerInputKeyboard_Movement;
    private readonly InputAction m_PlayerInputKeyboard_SwordAttack;
    private readonly InputAction m_PlayerInputKeyboard_SpecialAttack;
    /// <summary>
    /// Provides access to input actions defined in input action map "PlayerInputKeyboard".
    /// </summary>
    public struct PlayerInputKeyboardActions
    {
        private @Master m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerInputKeyboardActions(@Master wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputKeyboard/Dash".
        /// </summary>
        public InputAction @Dash => m_Wrapper.m_PlayerInputKeyboard_Dash;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputKeyboard/Movement".
        /// </summary>
        public InputAction @Movement => m_Wrapper.m_PlayerInputKeyboard_Movement;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputKeyboard/SwordAttack".
        /// </summary>
        public InputAction @SwordAttack => m_Wrapper.m_PlayerInputKeyboard_SwordAttack;
        /// <summary>
        /// Provides access to the underlying input action "PlayerInputKeyboard/SpecialAttack".
        /// </summary>
        public InputAction @SpecialAttack => m_Wrapper.m_PlayerInputKeyboard_SpecialAttack;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputKeyboard; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerInputKeyboardActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerInputKeyboardActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerInputKeyboardActions" />
        public void AddCallbacks(IPlayerInputKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterfaces.Add(instance);
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @SwordAttack.started += instance.OnSwordAttack;
            @SwordAttack.performed += instance.OnSwordAttack;
            @SwordAttack.canceled += instance.OnSwordAttack;
            @SpecialAttack.started += instance.OnSpecialAttack;
            @SpecialAttack.performed += instance.OnSpecialAttack;
            @SpecialAttack.canceled += instance.OnSpecialAttack;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerInputKeyboardActions" />
        private void UnregisterCallbacks(IPlayerInputKeyboardActions instance)
        {
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @SwordAttack.started -= instance.OnSwordAttack;
            @SwordAttack.performed -= instance.OnSwordAttack;
            @SwordAttack.canceled -= instance.OnSwordAttack;
            @SpecialAttack.started -= instance.OnSpecialAttack;
            @SpecialAttack.performed -= instance.OnSpecialAttack;
            @SpecialAttack.canceled -= instance.OnSpecialAttack;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerInputKeyboardActions.UnregisterCallbacks(IPlayerInputKeyboardActions)" />.
        /// </summary>
        /// <seealso cref="PlayerInputKeyboardActions.UnregisterCallbacks(IPlayerInputKeyboardActions)" />
        public void RemoveCallbacks(IPlayerInputKeyboardActions instance)
        {
            if (m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerInputKeyboardActions.AddCallbacks(IPlayerInputKeyboardActions)" />
        /// <seealso cref="PlayerInputKeyboardActions.RemoveCallbacks(IPlayerInputKeyboardActions)" />
        /// <seealso cref="PlayerInputKeyboardActions.UnregisterCallbacks(IPlayerInputKeyboardActions)" />
        public void SetCallbacks(IPlayerInputKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputKeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerInputKeyboardActions" /> instance referencing this action map.
    /// </summary>
    public PlayerInputKeyboardActions @PlayerInputKeyboard => new PlayerInputKeyboardActions(this);

    // SaveGame
    private readonly InputActionMap m_SaveGame;
    private List<ISaveGameActions> m_SaveGameActionsCallbackInterfaces = new List<ISaveGameActions>();
    private readonly InputAction m_SaveGame_Create;
    private readonly InputAction m_SaveGame_Save;
    private readonly InputAction m_SaveGame_Load;
    private readonly InputAction m_SaveGame_NewGame;
    private readonly InputAction m_SaveGame_Mouse;
    private readonly InputAction m_SaveGame_MousePosition;
    /// <summary>
    /// Provides access to input actions defined in input action map "SaveGame".
    /// </summary>
    public struct SaveGameActions
    {
        private @Master m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SaveGameActions(@Master wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SaveGame/Create".
        /// </summary>
        public InputAction @Create => m_Wrapper.m_SaveGame_Create;
        /// <summary>
        /// Provides access to the underlying input action "SaveGame/Save".
        /// </summary>
        public InputAction @Save => m_Wrapper.m_SaveGame_Save;
        /// <summary>
        /// Provides access to the underlying input action "SaveGame/Load".
        /// </summary>
        public InputAction @Load => m_Wrapper.m_SaveGame_Load;
        /// <summary>
        /// Provides access to the underlying input action "SaveGame/NewGame".
        /// </summary>
        public InputAction @NewGame => m_Wrapper.m_SaveGame_NewGame;
        /// <summary>
        /// Provides access to the underlying input action "SaveGame/Mouse".
        /// </summary>
        public InputAction @Mouse => m_Wrapper.m_SaveGame_Mouse;
        /// <summary>
        /// Provides access to the underlying input action "SaveGame/MousePosition".
        /// </summary>
        public InputAction @MousePosition => m_Wrapper.m_SaveGame_MousePosition;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SaveGame; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SaveGameActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SaveGameActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SaveGameActions" />
        public void AddCallbacks(ISaveGameActions instance)
        {
            if (instance == null || m_Wrapper.m_SaveGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SaveGameActionsCallbackInterfaces.Add(instance);
            @Create.started += instance.OnCreate;
            @Create.performed += instance.OnCreate;
            @Create.canceled += instance.OnCreate;
            @Save.started += instance.OnSave;
            @Save.performed += instance.OnSave;
            @Save.canceled += instance.OnSave;
            @Load.started += instance.OnLoad;
            @Load.performed += instance.OnLoad;
            @Load.canceled += instance.OnLoad;
            @NewGame.started += instance.OnNewGame;
            @NewGame.performed += instance.OnNewGame;
            @NewGame.canceled += instance.OnNewGame;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SaveGameActions" />
        private void UnregisterCallbacks(ISaveGameActions instance)
        {
            @Create.started -= instance.OnCreate;
            @Create.performed -= instance.OnCreate;
            @Create.canceled -= instance.OnCreate;
            @Save.started -= instance.OnSave;
            @Save.performed -= instance.OnSave;
            @Save.canceled -= instance.OnSave;
            @Load.started -= instance.OnLoad;
            @Load.performed -= instance.OnLoad;
            @Load.canceled -= instance.OnLoad;
            @NewGame.started -= instance.OnNewGame;
            @NewGame.performed -= instance.OnNewGame;
            @NewGame.canceled -= instance.OnNewGame;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SaveGameActions.UnregisterCallbacks(ISaveGameActions)" />.
        /// </summary>
        /// <seealso cref="SaveGameActions.UnregisterCallbacks(ISaveGameActions)" />
        public void RemoveCallbacks(ISaveGameActions instance)
        {
            if (m_Wrapper.m_SaveGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SaveGameActions.AddCallbacks(ISaveGameActions)" />
        /// <seealso cref="SaveGameActions.RemoveCallbacks(ISaveGameActions)" />
        /// <seealso cref="SaveGameActions.UnregisterCallbacks(ISaveGameActions)" />
        public void SetCallbacks(ISaveGameActions instance)
        {
            foreach (var item in m_Wrapper.m_SaveGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SaveGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SaveGameActions" /> instance referencing this action map.
    /// </summary>
    public SaveGameActions @SaveGame => new SaveGameActions(this);
    private int m_XboxSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme XboxScheme
    {
        get
        {
            if (m_XboxSchemeIndex == -1) m_XboxSchemeIndex = asset.FindControlSchemeIndex("Xbox");
            return asset.controlSchemes[m_XboxSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerInputXbox" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerInputXboxActions.AddCallbacks(IPlayerInputXboxActions)" />
    /// <seealso cref="PlayerInputXboxActions.RemoveCallbacks(IPlayerInputXboxActions)" />
    public interface IPlayerInputXboxActions
    {
        /// <summary>
        /// Method invoked when associated input action "Dash" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDash(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwordAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwordAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SpecialAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpecialAttack(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerInputKeyboard" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerInputKeyboardActions.AddCallbacks(IPlayerInputKeyboardActions)" />
    /// <seealso cref="PlayerInputKeyboardActions.RemoveCallbacks(IPlayerInputKeyboardActions)" />
    public interface IPlayerInputKeyboardActions
    {
        /// <summary>
        /// Method invoked when associated input action "Dash" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDash(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwordAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwordAttack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SpecialAttack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSpecialAttack(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SaveGame" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SaveGameActions.AddCallbacks(ISaveGameActions)" />
    /// <seealso cref="SaveGameActions.RemoveCallbacks(ISaveGameActions)" />
    public interface ISaveGameActions
    {
        /// <summary>
        /// Method invoked when associated input action "Create" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCreate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Save" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSave(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Load" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLoad(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "NewGame" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewGame(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Mouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouse(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MousePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
